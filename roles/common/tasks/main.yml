---
  #
  # Set automatic makecache for dnf
  #
  - name: Enable regular dnf makecache
    service: name=dnf-makecache.timer state=started enabled=yes

  #
  # Remove yum caches
  #
  - name: Remove yum cache
    file: path="/var/cache/yum" state=absent
  - name: Remove yum mock cache
    file: path="/var/cache/mock/fedora-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/yum_cache" state=absent

  # Enable TRIM
  - name: Enable weekly FS TRIM
    service: name=fstrim.timer state=started enabled=yes
  - name: Fix /etc/crypttab
    replace: dest=/etc/crypttab regexp='^(.*)none $' replace='\1none discard' backup=yes
  - name: Check if /etc/crypttab is in initrd
    shell: "lsinitrd /boot/initramfs-$(uname -r).img etc/crypttab | grep discard"
    register: result
  - name: Fix initramfs
    shell: dracut --force -I /etc/crypttab
    when: result|failed

  #
  # Set swappiness to reasonable value
  #
  - name: Set swappiness to some low value
    sysctl: name=vm.swappiness value=5 state=present

  #
  # Install necessary packages
  #
  - name: Check rpmfusion-free
    shell: "rpm -q rpmfusion-free-release-{{ ansible_distribution_major_version }}"
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install rpmfusion-free
    dnf: name="http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm" state=present
    when: result|failed
  - name: Update to the latest
    dnf: name='*' state=latest
  - name: Install packages
    dnf: name={{ item }} state=present
    with_items:
    - ansible-lint
    - bash-completion
    - curl
    - dconf-editor
    - freemind
    - fuse-sshfs
    - gedit-plugins
    - ghostscript
    - gimp
    - git
    - gnome-tweak-tool
    - hdparm
    - htop
    - kate-plugins
    - keepassx
    - krb5-auth-dialog
    - krb5-workstation
    - lftp
    - linphone
    - lm_sensors
    - lshw
    - mc
    - meld
    - mmv
    - mock
    - nano
    - poppler
    - powertop
    - psutils
    - python-tools
    - rfkill
    - rpmconf
    - screen
    - sdparm
    - simple-scan
    - smartmontools
    - sysfsutils
    - terminator
    - thunderbird
    - tmux
    - tuned-utils
    - vim-enhanced
    - wget
    - youtube-dl

  #
  # Install MS fonts
  #
  - name: Check msttcore-fonts
    shell: rpm -q msttcore-fonts-installer
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install msttcore-fonts
    dnf: name=https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm state=present
    when: result|failed

  #
  # Install languages
  #
  - name: Install Czech
    dnf: name=langpacks-cs state=present

  - name: Install English
    dnf: name=langpacks-en state=present

  #
  # Check if var_user is valid
  #
  - name: Check if username is valid
    shell: ls -d /home/{{ var_user }}
    changed_when: "result.rc != 0"

  #
  # Fix groups membership
  #
  - name: Add user to mock group
    user: name={{ var_user}} append=yes groups=mock
  - name: Add user to lp group
    user: name={{ var_user}} append=yes groups=lp

  #
  # Mock should use dnf
  #
  - name: Switch mock from yum to dnf
    lineinfile: dest=/etc/mock/site-defaults.cfg regexp="^config_opts..package_manager" insertafter="^# config_opts..package_manager" line="config_opts['package_manager'] = 'dnf'"

  #
  # Setup htop
  #
  - name: Check htoprc
    shell: ls -d /home/{{ var_user }}/.config/htop/
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Create htoprc dir
    file: path=/home/{{ var_user }}/.config/htop state=directory mode=755 owner={{ var_user }} group={{ var_user }}
    when: result|failed
  - name: Copy htoprc file
    copy: src=htoprc dest=/home/{{ var_user }}/.config/htop/htoprc mode=600 owner={{ var_user }} group={{ var_user }}

  #
  # Setup ssh
  #
  - name: Create directory for config of ssh
    file: dest={{ item }}/.ssh state=directory mode=700
    with_items: [/root, "/home/{{ var_user }}"]
  - name: Copy config of ssh
    copy: src=ssh.config dest={{ item }}/.ssh/config mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup vim
  #
  - name: Copy config of vim
    copy: src=vimrc dest={{ item }}/.vimrc mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup bash prompt
  #
  - name: Copy config of bash prompt
    copy: src=bashrc.ps1.sh dest={{ item }}/.bashrc.ps1.sh mode=755
    with_items: [/root, "/home/{{ var_user }}"]
  - name: Load new bash prompt by default
    lineinfile: dest="{{ item }}/.bashrc" line="source ~/.bashrc.ps1.sh"
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup screen
  #
  - name: Copy config of screen
    copy: src=screenrc dest={{ item }}/.screenrc mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup dnsmasq
  #
  - name: Enable dnsmasq
    ini_file: dest=/etc/NetworkManager/NetworkManager.conf section=main option=dns value=dnsmasq

  #
  # Setup journald
  #
  - name: Limit max size of journald logs
    ini_file: dest=/etc/systemd/journald.conf section=Journal option=SystemMaxUse value=500M

  #
  # Fix mc file highliting
  #
  - name: Disable temp highlight
    lineinfile: dest=/usr/share/mc/skins/default.ini regexp="^    temp =" line="    temp ="
  - name: Disable archive highlight
    lineinfile: dest=/usr/share/mc/skins/default.ini regexp="^    archive =" line="    archive ="
  - name: Disable doc highlight
    lineinfile: dest=/usr/share/mc/skins/default.ini regexp="^    doc =" line="    doc ="
  - name: Disable source highlight
    lineinfile: dest=/usr/share/mc/skins/default.ini regexp="^    source =" line="    source ="
  - name: Disable media highlight
    lineinfile: dest=/usr/share/mc/skins/default.ini regexp="^    media =" line="    media ="
  - name: Disable graph highlight
    lineinfile: dest=/usr/share/mc/skins/default.ini regexp="^    graph =" line="    graph ="
  - name: Disable database highlight
    lineinfile: dest=/usr/share/mc/skins/default.ini regexp="^    database =" line="    database ="

