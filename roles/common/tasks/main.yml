---
  #
  # Restore original dnf and yum configuration files
  #
  - name: Check yum
    shell: rpm -V yum
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Download yum
    shell: dnf download --destdir=/tmp/ yum
    when: result|failed
  - name: Backup yum.conf
    shell: mv /etc/yum.conf /etc/yum.conf_backup
    when: result|failed
  - name: Restore yum.conf
    shell: rpm --reinstall '/tmp/yum-*.rpm'
    when: result|failed
  - name: Check dnf-conf
    shell: rpm -V $(rpm -qf --qf "%{name}" /etc/dnf/dnf.conf)
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Download dnf-conf
    shell: dnf download --destdir=/tmp/ $(rpm -qf --qf "%{name}" /etc/dnf/dnf.conf)
    when: result|failed
  - name: Backup dnf.conf
    shell: mv /etc/dnf/dnf.conf /etc/dnf/dnf.conf_backup
    when: result|failed
  - name: Restore dnf.conf
    shell: rpm --reinstall '/tmp/dnf-*.rpm'
    when: result|failed

  #
  # Set automatic makecache for dnf and yum
  #
  - name: Disable regular yum makecache
    service: name=yum-makecache.timer state=stopped enabled=no
  - name: Enable regular dnf makecache
    service: name=dnf-makecache.timer state=started enabled=yes

  #
  # Set swappiness to reasonable value
  #
  - name: Set swappiness to some low value
    sysctl: name=vm.swappiness value=5 state=present

  #
  # Boot menu waits only 1s
  #
  - name: Boot menu of Grub waits only 1s
    lineinfile: dest=/etc/sysconfig/grub regexp=^GRUB_TIMEOUT= line=GRUB_TIMEOUT=1

  #
  # Install necessary packages
  #
  - name: Check rpmfusion-free
    shell: rpm -q rpmfusion-free-release-22
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install rpmfusion-free
    dnf: name=http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-22.noarch.rpm state=present
    when: result|failed
  - name: Check adobe-release
    shell: rpm -q adobe-release-{{ ansible_architecture }}
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install adobe-release
    dnf: name=http://linuxdownload.adobe.com/adobe-release/adobe-release-{{ ansible_architecture }}-1.0-1.noarch.rpm state=present
    when: result|failed
  - name: Check google-chrome
    shell: rpm -q google-chrome-stable
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install google-chrome
    dnf: name=https://dl.google.com/linux/direct/google-chrome-stable_current_{{ ansible_architecture }}.rpm state=present
    when: result|failed
  - name: Fix google-chrome repo gpgkey
    ini_file: dest=/etc/yum.repos.d/google-chrome.repo section=google-chrome option=gpgkey value="https://dl-ssl.google.com/linux/linux_signing_key.pub"
  - name: Check google-talkplugin
    shell: rpm -q google-talkplugin
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install google-talkplugin
    dnf: name=https://dl.google.com/linux/direct/google-talkplugin_current_{{ ansible_architecture }}.rpm state=present
    when: result|failed
  - name: Fix google-talkplugin repo gpgkey
    ini_file: dest=/etc/yum.repos.d/google-talkplugin.repo section=google-talkplugin option=gpgkey value="https://dl-ssl.google.com/linux/linux_signing_key.pub"
  - name: Remove packages
    dnf: name={{ item }} state=absent
    with_items:
    - gnash
    - kate-pate
    - lightspark
    - prelink
  - name: Update to the latest
    dnf: name='*' state=latest
  - name: Install packages
    dnf: name={{ item }} state=present
    with_items:
    - "@development-tools"
    - "@gnome-desktop"
    - "@libreoffice"
    - "@minimal-environment"
    - "@multimedia"
    - "@printing"
    - "@virtualization"
    - "@workstation-product-environment"
    - ansible-lint
    - bash-completion
    - curl
    - dconf-editor
    - dnf-langpacks
    - ffmpeg
    - flash-plugin
    - freemind
    - fuse-sshfs
    - ghostscript
    - gimp
    - git
    - gnome-tweak-tool
    - gstreamer-ffmpeg
    - gstreamer1-libav
    - hdparm
    - htop
    - kate-plugins
    - keepassx
    - krb5-auth-dialog
    - krb5-workstation
    - icedtea-web
    - lftp
    - linphone
    - lm_sensors
    - lshw
    - mc
    - mencoder
    - meld
    - mmv
    - mplayer
    - nano
    - poppler
    - powertop
    - psutils
    - python-tools
    - rfkill
    - rpmconf
    - screen
    - sdparm
    - smartmontools
    - sysfsutils
    - terminator
    - thunderbird
    - tmux
    - tuned-utils
    - vim-enhanced
    - vlc
    - wget
    - youtube-dl
    - yum-utils

  #
  # Install MS fonts
  #
  - name: Check msttcore-fonts
    shell: rpm -q msttcore-fonts-installer
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install msttcore-fonts
    dnf: name=https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm state=present
    when: result|failed

  #
  # Install languages
  #
  - name: Check Czech
    shell: dnf langlist | grep Czech
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install Czech
    shell: dnf langinstall Czech -y
    when: result|failed
  - name: Check English
    shell: dnf langlist | grep English
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Install English
    shell: dnf langinstall English -y
    when: result|failed

  #
  # Check if var_user is valid
  #
  - name: Check if username is valid
    shell: ls -d /home/{{ var_user }}
    changed_when: "result.rc != 0"

  #
  # Setup mplayer
  #
  - name: Create directory for config of mplayer
    file: dest="/home/{{ var_user }}/.mplayer" state=directory mode=755 owner={{ var_user }} group={{ var_user }}
  - name: Copy config of mplayer
    copy: src=mplayer.config dest=/home/{{ var_user }}/.mplayer/config mode=644 owner={{ var_user }} group={{ var_user }}

  #
  # Setup vlc
  #
  - name: Check vlcrc
    shell: ls /home/{{ var_user }}/.config/vlc/vlcrc
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Create vlcrc dir
    file: path=/home/{{ var_user }}/.config/vlc state=directory mode=755 owner={{ var_user }} group={{ var_user }}
    when: result|failed
  - name: Copy vlcrc file
    copy: src=vlcrc dest=/home/{{ var_user }}/.config/vlc/vlcrc mode=600 owner={{ var_user }} group={{ var_user }}
    when: result|failed
  - name: Check vlc file caching
    shell: grep 'file-caching=30000' /home/{{ var_user }}/.config/vlc/vlcrc
    register: result
    ignore_errors: True
    changed_when: "result.rc != 0"
  - name: Fix vlc file caching
    shell: "sed -i s/.*file-caching.*/file-caching=30000/ /home/{{ var_user }}/.config/vlc/vlcrc"
    when: result|failed

  #
  # Setup ssh
  #
  - name: Create directory for config of ssh
    file: dest={{ item }}/.ssh state=directory mode=700
    with_items: [/root, "/home/{{ var_user }}"]
  - name: Copy config of ssh
    copy: src=ssh.config dest={{ item }}/.ssh/config mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup vim
  #
  - name: Copy config of vim
    copy: src=vimrc dest={{ item }}/.vimrc mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup bash prompt
  #
  - name: Copy config of bash prompt
    copy: src=bashrc.ps1.sh dest={{ item }}/.bashrc.ps1.sh mode=755
    with_items: [/root, "/home/{{ var_user }}"]
  - name: Load new bash prompt by default
    lineinfile: dest="{{ item }}/.bashrc" line="source ~/.bashrc.ps1.sh"
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup screen
  #
  - name: Copy config of screen
    copy: src=screenrc dest={{ item }}/.screenrc mode=644
    with_items: [/root, "/home/{{ var_user }}"]

  #
  # Setup dnsmasq
  #
  - name: Enable dnsmasq
    ini_file: dest=/etc/NetworkManager/NetworkManager.conf section=main option=dns value=dnsmasq

  #
  # Setup journald
  #
  - name: Limit max size of journald logs
    ini_file: dest=/etc/systemd/journald.conf section=Journal option=SystemMaxUse value=500M

